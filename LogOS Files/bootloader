--BootLoader
--Made by Logsys for LogOS
--[[
Copyright (C) 2014 Jo√£o Pacheco a.k.a logsys [transpois0n@me.com]

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
copies of the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

-The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
-Visible credit is given to the original author.
-The software is distributed in a non-profit way.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--]]

--All rights reserved
--Loading Values
loading = true


--Functions
_G.backgd = function()
	img1 = paintutils.loadImage(".bootloader")
	paintutils.drawImage(img1, 5, 1)
end
_G.wheelSpin = function()
	term.setCursorPos(10,7)
	local spin = {}
	spin[1] = "/"
	spin[2] = "-"
	spin[3] = "\\"
	spin[4] = "|"
	z = 0
	while loading do
		
		for i = 1,4 do
			term.setCursorPos(26,16)
			term.write(spin[i])
			sleep(0.01)
		end
		z = z+1
		if z == 10 then
			loading = false
		end
	end
	return "1"
end

_G.load = function(sVerbose)
	if sVerbose then print("Loading Kernel") end
	sleep(1.2)
	os.run({},"LogOS/kernel")
	if sVerbose then print("Lo<ding Drivers") end
	--loadDriver()
	sleep(0.2)
	if sVerbose then sleep(4) end
	loading = false
	os.run({},"LogOS/logos")
end

_G.runAll = function()
	term.setBackgroundColor(colors.white)
	term.setTextColor(colors.gray)
	term.clear()
	backgd()
	parallel.waitForAll(wheelSpin(),load())
	
end

--Function running area and non-function scripts
_G.bootloaderF = function()

	term.clear()
	term.setCursorPos(1,1)
	term.write("Press V to boot in verbose mode")
	os.startTimer(1.5)
	event, key = os.pullEvent()
	if event == "char" or event == "key" then
		if key == "v" or key == "V" or key == 47 then
			term.setBackgroundColor(colors.gray)
			term.setTextColor(colors.white)
			term.clear()
			term.setCursorPos(1,1)
			load(true)
		else
			runAll()
		end
	else
		runAll()
	end
end

--Top Level Overriding
if aftertlco then print("Already tlcoed") return end
 
local m = _G.os.shutdown
local first=false
function _G.os.shutdown()
        if first then first=false return end
        _G.os.shutdown = m
        _G.aftertlco = true
        term.redirect(term.native())
        local ok, err = pcall( function()
        parallel.waitForAny(
                function()
            bootloaderF()
            os.run( {}, "rom/programs/shutdown" )
                end,
                function() os.loadAPI("/rom/apis/rednet") rednet.run() end
                )
        end )
 
        -- If the shit errored, let the user read it.
        term.redirect( term.native() )
        if not ok then
                printError( err )
                pcall( function()
                        term.setCursorBlink( false )
                        print( "Press any key to continue" )
                        os.pullEvent( "key" )
                end )
        end
        os.shutdown()
end
 
local t = _G.type
function _G.type(A)
        if A=="Breakout" then print("Breaking") _G.type=t os.queueEvent("key") error("Breaking",2)
        else return t(A) end
end
 
shell.exit()
os.queueEvent("key")
os.queueEvent("modem_message", "Breakout", 1, 1, "Breakout" )
error("Breaking",2)